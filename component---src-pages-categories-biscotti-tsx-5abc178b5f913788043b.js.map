{"version":3,"sources":["webpack:///./src/components/ProductPage/ProductView/ProductView.module.css","webpack:///./src/components/ProductPage/ProductView/ProductView.tsx","webpack:///./src/pages/categories/biscotti.tsx","webpack:///./src/hooks/queries/useProductQuery.ts"],"names":["module","exports","ProductView","props","style","position","backgroundColor","bcgColor","width","height","zIndex","display","justifyContent","alignItems","maxWidth","marginBottom","className","classes","fluidImg","fluid","alt","textWrapper","titleWrapper","title","descWrapper","descriptionTitle","description","ingredWrapper","ingredientsTitle","ingredients","consWrapper","conservationTitle","conservation","BiscottiPage","biscotti","useProductQuery","allSanityProduct","edges","filter","p","node","category","page","pages","scrolling","ref","factor","speed","LayoutHeader","left","right","top","Centralizer","marginLeft","Quote","textAlign","bottom","QuoteStyle","header","PageTitle","map","console","log","key","id","backGroundColor","hex","productPhoto","asset","marginTop","useStaticQuery"],"mappings":"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","file":"component---src-pages-categories-biscotti-tsx-5abc178b5f913788043b.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"textWrapper\":\"ProductView-module--textWrapper--8-aF7\",\"fluidImg\":\"ProductView-module--fluidImg--3JCGH\",\"title\":\"ProductView-module--title--2YAnF\",\"titleWrapper\":\"ProductView-module--titleWrapper--YgPFm\",\"descriptionTitle\":\"ProductView-module--descriptionTitle--qd1hF\",\"ingredientsTitle\":\"ProductView-module--ingredientsTitle--3EVI2\",\"conservationTitle\":\"ProductView-module--conservationTitle--3-vmi\",\"description\":\"ProductView-module--description--61jyL\",\"ingredients\":\"ProductView-module--ingredients--2DVqV\",\"conservation\":\"ProductView-module--conservation--jGM2p\",\"descWrapper\":\"ProductView-module--descWrapper--2zFy3\",\"ingredWrapper\":\"ProductView-module--ingredWrapper--1l9sp\",\"consWrapper\":\"ProductView-module--consWrapper--2tSPd\"};","import React, { FC } from 'react';\r\nimport Img from 'gatsby-image';\r\nimport Centralizer from '../../StructureComponents/Centralizer/Centralizer';\r\nimport classes from './ProductView.module.css';\r\n\r\ninterface pageProps {\r\n  bcgColor: string,\r\n  fluidImg: any,\r\n  title: string,\r\n  description: string,\r\n  ingredients: string,\r\n  conservation: string\r\n}\r\n\r\nconst ProductView = (props: pageProps) => {\r\n  return (\r\n    <div style={{ position: \"relative\", backgroundColor: props.bcgColor, width: \"100%\", height: \"100vh\", zIndex: 100, display: \"flex\", justifyContent: \"space-evenly\", alignItems: \"center\" }}>\r\n      <div style={{ maxWidth: \"400px\", width: \"20vw\", height: \"300px\", marginBottom: \"10vh\" }}>\r\n        <Img className={classes.fluidImg} fluid={props.fluidImg} alt=\"product photo\" />\r\n      </div>\r\n      <div className={classes.textWrapper}>\r\n        <div className={classes.titleWrapper}>\r\n          <span className={classes.title}>{props.title}</span>\r\n        </div>\r\n        <div className={classes.descWrapper}>\r\n          <span className={classes.descriptionTitle}>Descrizione prodotto</span>\r\n          <br></br>\r\n          <span className={classes.description}>{props.description}</span>\r\n        </div>\r\n        <div className={classes.ingredWrapper}>\r\n          <span className={classes.ingredientsTitle}>Ingredienti</span>\r\n          <br></br>\r\n          <span className={classes.ingredients}>{props.ingredients}</span>\r\n        </div>\r\n        <div className={classes.consWrapper}>\r\n          <span className={classes.conservationTitle}>Conservazione</span>\r\n          <br></br>\r\n          <span className={classes.conservation}>{props.conservation}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProductView;","import React from 'react';\r\nimport { Parallax, ParallaxLayer } from 'react-spring/renderprops-addons';\r\nimport { Product, ProductQuery, QuoteStyle } from '../../../types';\r\nimport LayoutHeader from '../../components/LayoutHeader/LayoutHeader';\r\nimport PageTitle from '../../components/PageTitle/PageTitle';\r\nimport Quote from '../../components/Quote/Quote';\r\nimport Centralizer from '../../components/StructureComponents/Centralizer/Centralizer';\r\nimport { useProductQuery } from '../../hooks/queries/useProductQuery';\r\nimport Img from 'gatsby-image';\r\nimport ProductView from '../../components/ProductPage/ProductView/ProductView';\r\n\r\nconst BiscottiPage: React.FC = () => {\r\n  const products: ProductQuery = useProductQuery();\r\n  const biscotti: Array<Product> = products.allSanityProduct.edges.filter((p: Product) => p.node.category.title == \"Biscotti\");\r\n  let page = 0;\r\n\r\n  let parallax;\r\n\r\n  return (\r\n    <Parallax pages={3.4} scrolling={true} ref={ref => parallax = ref}>\r\n\r\n      {/* ------------HEADER SECTION */}\r\n      <div style={{ backgroundColor: \"#F0E9E4\", width: \"100%\", height: \"100vh\", zIndex: -100, position: \"relative\" }}>\r\n        <ParallaxLayer factor={0} speed={-1}>\r\n          <LayoutHeader />\r\n          <section style={{ position: \"absolute\", left: \"0\", right: \"0\", top: \"0\", height: \"100vh\" }}>\r\n            <Centralizer>\r\n              <div style={{ position: \"absolute\", width: \"55vw\", top: \"45vh\", marginLeft: \"25vw\" }}>\r\n                <Quote>Le materie prime utilizzate per i nostri prodotti provengono dalle ricche e generose terre campane che offrono eccellenze riconosciute in tutto il mondo.</Quote>\r\n              </div>\r\n            </Centralizer>\r\n            <div style={{ position: \"absolute\", width: \"6em\", marginLeft: \"10vw\", textAlign: \"center\", bottom: \"30vh\" }}>\r\n              <Quote style={QuoteStyle.header}>B</Quote>\r\n            </div>\r\n            <div style={{ position: \"absolute\", right: \"20vw\", bottom: \"15vh\" }}>\r\n              <PageTitle>Biscotti</PageTitle>\r\n            </div>\r\n          </section>\r\n        </ParallaxLayer>\r\n      </div>\r\n\r\n      {biscotti.map((p: Product) => {\r\n        console.log(p.node.title);\r\n        page++;\r\n        return (\r\n          <section style={{ position: \"relative\", width: \"100%\", height: \"100vh\" }} key={p.node.id} >\r\n            <ParallaxLayer factor={page} speed={page / 10}>\r\n              <ProductView\r\n                bcgColor={p.node.backGroundColor.hex}\r\n                fluidImg={p.node.productPhoto.asset.fluid}\r\n                title={p.node.title}\r\n                description={p.node.description}\r\n                conservation={p.node.conservation}\r\n                ingredients={p.node.ingredients}\r\n              />\r\n            </ParallaxLayer>\r\n          </section>\r\n        )\r\n      })}\r\n      {page++}\r\n      <section style={{ position: \"relative\", width: \"100%\", height: \"100vh\", marginTop: \"30vh\" }} >\r\n        <ParallaxLayer factor={page} speed={page / 10}>\r\n          <div style={{ backgroundColor: \"white\", width: \"100%\", height: \"100vh\", zIndex: 100 }}>\r\n          </div>\r\n        </ParallaxLayer>\r\n      </section>\r\n    </Parallax >\r\n  )\r\n}\r\n\r\nexport default BiscottiPage;","import { useStaticQuery, graphql } from 'gatsby';\r\n\r\nexport const useProductQuery = () => {\r\n  const Products = useStaticQuery(graphql`\r\n  query productQuery {\r\n    allSanityProduct {\r\n      edges {\r\n        node {\r\n          category {\r\n            id\r\n            title\r\n          }\r\n          title\r\n          priceEur\r\n          description\r\n          slug {\r\n            current\r\n          }\r\n          backGroundColor{\r\n            hex\r\n          }\r\n          id\r\n          conservation\r\n          ingredients\r\n          productPhoto {\r\n            asset {\r\n              fluid(maxWidth: 400){\r\n                ...GatsbySanityImageFluid\r\n              }\r\n          }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  `\r\n  )\r\n  return Products;\r\n}"],"sourceRoot":""}